<%args>
	$domain   => undef
	$username => undef
	$password => undef
	$token    => undef
	$session
</%args>
<%init>
	my ($d, $u, $cookie);

	%session = ( );

	# recover domain using token or creds
	if(defined($token)) {
		# check params sanity
		Pandap::SessionException->throw(error => "Bad token login")
			if(defined($domain)
			|| defined($username)
			|| defined($password));

		# fetch and remove token
		$token = $m->comp("/token/get.comp", id => $token);
		$m->comp("/token/delete.comp", id => $token->{id})
			if($token->{one_time});
		$m->comp("/user/passchange.comp",
				domain_id => $token->{domain_id},
				username  => $token->{user_name},
				password  => undef)
			if($token->{pass_reset});

		# get domain found in token
		$d = $m->comp("/domain/get.comp",
				id    => $token->{domain_id},
				check => 0);

		# force 'username' found in token
		$username = $token->{user_name};
		undef $password;
	} else {
		# check params sanity
		Pandap::SessionException->throw(error => "Bad creds login")
			if(!defined($domain)
			|| !defined($username)
			|| !defined($password));

		# try to recover user's choosen domain
		$d = $m->comp("/domain/get.comp",
				name  => $domain,
				check => 0);

		# calculate password hash
		$password = $m->comp("/user/passhash.comp",
					domain_id => $d->{id},
					username  => $username,
					password  => $password);
	}

	# check domain is available
	Pandap::SessionException->throw(error => "Domain not available.")
		if(!$d || !$d->{available});

	# fetch user info
	$u = $m->comp("/user/get.comp",
			domain_id => $d->{id},
			username  => $username,
			check     => 0);
	Pandap::SessionException->throw(error => "User ($username) not available " . Dumper($u))
		if(!$u || !$u->{available});
	Pandap::SessionException->throw(error => "User has not created a password yet.")
		if(!defined($u->{password}) && !defined($token));

	# check password
	if(defined($password)) {
		if($password ne $u->{password}) {
			$dbh->rollback;
			$m->comp("/user/badtry.comp",
					domain_id => $d->{id},
					username => $username);
			$dbh->commit;
			Pandap::SessionException->throw(error => "Bad password");
		} else {
			$m->comp("/user/goodtry.comp",
					domain_id => $d->{id},
					username => $username);
		}
	}

	# tie session and send the new session information
	if($session) {
		tie %session,
			'Apache::Session::Postgres',
			undef,
			{
				Handle => $dbh,
				Commit => 1
			};
		$cookie = Apache2::Cookie->new($request,
				-name     => 'PA_ID',
				-value    => $session{_session_id},
				-path     => '/',
				httponly  => 1,
				secure    => $ENV{HTTPS} eq "on",
			);
		$cookie->bake($request);
		logmsg("Delivered session '%s'", $session{_session_id});
	}

	# update session info
	$session{logged}    = 1;
	$session{domain_id} = $d->{id};
	$session{domain}    = $d->{name};
	$session{username}  = $u->{name};
</%init>
